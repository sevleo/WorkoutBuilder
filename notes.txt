Name: YoGato / YogaCat / ...
Description: Simple minimalist yoga sequence builder
Features:
- Drag & drop poses to form yoga sequence
- For each pose, specify duration
- Certain pose blocks are added in pairs (highlight them visually)
- Sequence displayed vertically
- Allow announcing yoga poses with google text to speech api
- Allow specifying your own instructions
- Allow announcing with signals instead of voice
- Allow publishing your sequence so other people can use it
- Allow rating published sequence and sort by rating
- Keep track of how many times a published sequence was completed


User Interface
- Home page -> login
    - Ability to log in (to be implemented later)
    - Ability to use as Guest
- Guest redirects to /build page
- Build page provides a canvas with blocks (on the left) and available blocks (on the right)
    - Add ability to change size of blocks






Tasks:


- Add ability to register and login
- Add Database & Backend

Low priority tasks:
- Update styles for hamburger menu
    - Fix issue when hamburger menu items jump upon opening when screen is big
- Change units to list, list will be easier to read
    - Element in the list can be made expandable
- Update hamburger to appear only when screen width is small (simplify the app)
- Add Drag Overlay to sortable items
- Add ability to sort catalog of poses by categories and by alphabet
    - Sorting by alphabet will show only unique poses
    - Sorting by categories will continue to duplicate poses bc each pose can be related to multiple categories


Tech debt:
- useReducer
- Apply redux
- Use Context API to store and distribute:
    - location
    - setLocation
    - aspectGroups
    - flow


Finished tasks:
- Create basic layout and components
- Add ability to drag aspects from the right panel and drop them on the left canvas
- When an aspect is dropped, trigger creation of a unit
- Assign unique id to units
- Assign step order to units and update steps each time an aspect is dropped
- When dropping an aspect, carry infromation ffrom the aspect to the unit
- After dropping an aspect, make sure draggable element disappears instead of returning back to its original position
- Allow dragging & dropping steps
- Allow changing order of steps by drag & drop
- Add ability to delete a unit from the flow
- Add ability to display the flow as a list of steps in console by pressing a button
- Add ability to modify length in seconds
- Add Flow Start button which will begin triggering announcements based on the duration
- Download yoga poses from yoga API and upload it to replace dummy data
- Add counter to see how many times a pose was added in the flow
- Update counter when pose is removed from flow
- Create an audio and play it in browser on button
- Update left canvas styles to make it look more neat
- Add ability to remove a unit from canvas
- Update draggable area of canvas unit
- Improve unit duration control
- Add validation for entering duration (allow only number 1-9)
- Add Navigation panel
- Update catalog to grid similar to canvas
- Replace Start with Preview
    - In Preview, show Summary
    - In Preview, show Start button
- Implement Preview
- Style wheel better
- Account for scroll on the right (gutter) in Preview
- Add total timer to flow
- Add Unit Timer to flow
- Add header emerging
- Change existing menu items to Hamburger
- In the middle of the header, add section for buttons
- Move Preview button to the Header middle section
- Add Clear button
- Update styles of buttons on Header
- Transform aspects into Accordion component
- Add number of poses to accordion summary
- Update styles of aspects
- Move buttons from Header to body
- Add simple card viewer instead of wheel
- in Flow, add Restart button
- in Flow, show counter and progress
- Update styles on Preview page
- Style summary and buttons
- Style progress bars and slider
- In Flow, add Pause & Resume button
- Add Stop button






Technologies:
- TypeScript
- JavaScript
- ReactJS
- TailwindCSS

Packages:
- DND Kit - to control drag & drop
- uuid - to generate unique id
- hamburger-react - to add hamburger menu
- react-slick - to make smooth slider
- react-use-precision-timer - to make accurate flow timer


Credits:
- https://github.com/alexcumplido/yoga-api
- https://github.com/rebeccaestes/yoga_api
- https://github.com/Stuwert/yoga-builder





npm run dev
npx tailwindcss -i ./src/index.css -o ./src/output.css --watch








MongoDB
sevaleonov 1oqBgzDoh9x84VLw


npm install mongodb


mongodb+srv://sevaleonov:1oqBgzDoh9x84VLw@cluster0.zjlmdta.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

Connection String
mongodb+srv://sevaleonov:<password>@cluster0.zjlmdta.mongodb.net/



const { MongoClient, ServerApiVersion } = require('mongodb');
const uri = "mongodb+srv://sevaleonov:1oqBgzDoh9x84VLw@cluster0.zjlmdta.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});
async function run() {
  try {
    // Connect the client to the server	(optional starting in v4.7)
    await client.connect();
    // Send a ping to confirm a successful connection
    await client.db("admin").command({ ping: 1 });
    console.log("Pinged your deployment. You successfully connected to MongoDB!");
  } finally {
    // Ensures that the client will close when you finish/error
    await client.close();
  }
}
run().catch(console.dir);